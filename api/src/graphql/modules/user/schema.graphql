type UserIdResponse {
  userId: ID!
}

type SignInByPhoneResponse {
  userId: ID!
  phone: String!
}

type TokenResponse {
  accessToken: String!
  refreshToken: String!
}

type User implements Node {
  id: ID!
  name: String
  email: String
  nickname: String
  dateOfBirth: Date
  gender: Gender
  phone: String
  picture: String
  identities: [Identity]
}

type Identity {
  sub: ID!
  provider: Provider!
  identityData: IdentityData!
  userId: ID
}

type RefreshToken {
  token: ID!
  createdAt: DateTime!
  revoked: Boolean!
  userId: ID!
}

type Query {
  me: User
}

type Mutation {
  signUp(input: SignUpInput!): UserIdResponse
  signInByPhone(input: SignInByPhoneInput!): SignInByPhoneResponse
  signInByProvider(input: SignInByProviderInput!): TokenResponse
  verifyPhoneOtp(input: VerifyPhoneOtpInput!): TokenResponse
  refreshTokens(input: RefreshTokensInput!): TokenResponse
  signOut(input: SignOutInput): EmptyResponse
  updateProfile(input: updateProfileInput!): User
}

input IdentityDataInput {
  name: String
  email: String
  picture: String
}

input SignUpInput {
  email: String!
  name: String!
  phone: String!
}

input SignInByProviderInput {
  provider: String!
  sub: String!
  identityData: IdentityDataInput!
}

input SignInByPhoneInput {
  phone: String!
}

input SignOutInput {
  refreshToken: String
}

input VerifyPhoneOtpInput {
  phone: String!
  code: String!
}

input RefreshTokensInput {
  refreshToken: String!
  accessToken: String!
}

input updateProfileInput {
  email: String!
  name: String!
  nickname: String
  phone: String!
  dateOfBirth: String
  gender: String
  picture: String
}
